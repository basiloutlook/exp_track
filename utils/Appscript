function doPost(e) {
  try {
    const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('Form Responses 1');
    const data = JSON.parse(e.postData.contents);
    const action = data.action || 'add';

    if (action === 'add') {
      // Generate a unique ID for this expense
      const id = data.id || new Date().getTime().toString();

      // Append row with 11 columns (including ID)
      const row = [
        new Date(), // Timestamp
        data.date || "",
        data.category || "",
        data.subCategory || "",
        data.item || "",
        data.amount || "",
        data.email || "",
        data.shopName || "",
        data.paymentMode || "",
        Array.isArray(data.labels)
          ? data.labels.join(", ")
          : data.labels || "",
        id // ✅ Unique ID (last column)
      ];

      sheet.appendRow(row);

      return ContentService.createTextOutput(
        JSON.stringify({
          success: true,
          message: "Expense added successfully",
          id
        })
      ).setMimeType(ContentService.MimeType.JSON);
    }

    if (action === 'update') {
      const id = String(data.id || '').trim();
      if (!id) throw new Error('Missing expense ID for update');

      const rows = sheet.getDataRange().getValues();
      const idCol = 11; // Column K (1-based index)

      for (let i = 1; i < rows.length; i++) {
        if (String(rows[i][idCol - 1]) === id) {
          sheet.getRange(i + 1, 1, 1, 11).setValues([[
            new Date(),
            data.date || "",
            data.category || "",
            data.subCategory || "",
            data.item || "",
            data.amount || "",
            data.email || "",
            data.shopName || "",
            data.paymentMode || "",
            Array.isArray(data.labels)
              ? data.labels.join(", ")
              : data.labels || "",
            id
          ]]);

          return ContentService.createTextOutput(
            JSON.stringify({
              success: true,
              message: "Expense updated successfully"
            })
          ).setMimeType(ContentService.MimeType.JSON);
        }
      }

      return ContentService.createTextOutput(
        JSON.stringify({
          success: false,
          message: "Expense ID not found for update"
        })
      ).setMimeType(ContentService.MimeType.JSON);
    }

    if (action === 'delete') {
      const id = String(data.id || '').trim();
      if (!id) throw new Error('Missing expense ID for deletion');

      const rows = sheet.getDataRange().getValues();
      const idCol = 11;

      for (let i = 1; i < rows.length; i++) {
        if (String(rows[i][idCol - 1]) === id) {
          sheet.deleteRow(i + 1);
          return ContentService.createTextOutput(
            JSON.stringify({
              success: true,
              message: "Expense deleted successfully"
            })
          ).setMimeType(ContentService.MimeType.JSON);
        }
      }

      return ContentService.createTextOutput(
        JSON.stringify({
          success: false,
          message: "Expense ID not found for deletion"
        })
      ).setMimeType(ContentService.MimeType.JSON);
    }

    return ContentService.createTextOutput(
      JSON.stringify({
        success: false,
        message: "Invalid action"
      })
    ).setMimeType(ContentService.MimeType.JSON);

  } catch (error) {
    return ContentService.createTextOutput(
      JSON.stringify({
        success: false,
        message: error.toString()
      })
    ).setMimeType(ContentService.MimeType.JSON);
  }
}

function doGet(e) {
  try {
    const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('Form Responses 1');
    const data = sheet.getDataRange().getValues();
    const headers = data[0];
    const rows = data.slice(1);

    const expenses = rows.map(r => ({
      timestamp: r[0],
      date: r[1],
      category: r[2],
      subCategory: r[3],
      item: r[4],
      amount: r[5],
      email: r[6],
      shop: r[7],
      paymentMode: r[8],
      labels: r[9] ? r[9].split(',').map(s => s.trim()) : [],
      id: r[10] || "" // ✅ Include ID from Sheet
    }));

    return ContentService.createTextOutput(JSON.stringify(expenses))
      .setMimeType(ContentService.MimeType.JSON);
  } catch (error) {
    return ContentService.createTextOutput(
      JSON.stringify({ error: error.toString() })
    ).setMimeType(ContentService.MimeType.JSON);
  }
}
