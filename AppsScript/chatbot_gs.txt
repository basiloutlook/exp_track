/*******************************************************
 * chatbot.gs
 * - All chatbot tool handling logic
 * - Tool implementations for Gemini function calling
 * - Called by main.gs when functionCall is detected
 *******************************************************/

/**
 * handleToolCall - Router for all Gemini function calls.
 * This function is called from main.gs doPost handler.
 */
function handleToolCall(toolCall) {
  const { name, args } = toolCall;

  // Get expense data using the getExpenses() function from main.gs
  const expensesData = getExpenses(); 

  // Convert date strings back to Date objects for processing
  const data = expensesData.map(e => {
    e.date = new Date(e.date); 
    e.amount = parseFloat(e.amount); 
    e.labels = Array.isArray(e.labels) ? e.labels : parseLabels(e.labels);
    return e;
  });

  Logger.log(`Handling tool call: ${name} with args: ${JSON.stringify(args)}`);

  try {
    switch (name) {
      // BASIC TOOLS
      case 'get_spending_trend':
        return _getSpendingTrend(data, args);
        
      case 'get_top_categories':
        return _getTopCategories(data, args);
        
      case 'get_category_vs_average':
        return _getCategoryVsAverage(data, args);
        
      case 'get_impulse_purchases':
        return _getImpulsePurchases(data, args);

      // ADVANCED TOOLS
      case 'filter_expenses':
        return _filterExpenses(data, args);
      
      case 'compare_time_periods':
        return _compareTimePeriods(data, args);
      
      case 'analyze_spending_patterns':
        return _analyzeSpendingPatterns(data, args);
      
      case 'get_expense_statistics':
        return _getExpenseStatistics(data, args);

      default:
        throw new Error(`Unknown tool name: ${name}`);
    }
  } catch (err) {
    Logger.log(`Tool execution error: ${err.message}`);
    return { success: false, error: err.message };
  }
}

// ===========================================
// HELPER FUNCTIONS
// ===========================================

/**
 * Enhanced period filtering with support for multiple time periods
 */
function _filterByPeriod(expenses, period, customStart, customEnd) {
  const now = new Date();
  
  if (customStart && customEnd) {
    const start = new Date(customStart);
    const end = new Date(customEnd);
    return expenses.filter(e => e.date >= start && e.date <= end);
  }
  
  switch (period) {
    case 'today':
      return expenses.filter(e => 
        e.date.toDateString() === now.toDateString()
      );
    
    case 'this_week':
      const weekStart = new Date(now);
      weekStart.setDate(now.getDate() - now.getDay());
      weekStart.setHours(0, 0, 0, 0);
      return expenses.filter(e => e.date >= weekStart);
    
    case 'last_week':
      const lastWeekStart = new Date(now);
      lastWeekStart.setDate(now.getDate() - now.getDay() - 7);
      lastWeekStart.setHours(0, 0, 0, 0);
      const lastWeekEnd = new Date(lastWeekStart);
      lastWeekEnd.setDate(lastWeekStart.getDate() + 7);
      return expenses.filter(e => e.date >= lastWeekStart && e.date < lastWeekEnd);
    
    case 'this_month':
      return expenses.filter(e => 
        e.date.getMonth() === now.getMonth() && 
        e.date.getFullYear() === now.getFullYear()
      );
    
    case 'last_month':
      const lastMonth = new Date(now.getFullYear(), now.getMonth() - 1, 1);
      return expenses.filter(e => 
        e.date.getMonth() === lastMonth.getMonth() && 
        e.date.getFullYear() === lastMonth.getFullYear()
      );
    
    case 'last_3_months':
      const threeMonthsAgo = new Date(now);
      threeMonthsAgo.setMonth(now.getMonth() - 3);
      return expenses.filter(e => e.date >= threeMonthsAgo);
    
    case 'last_6_months':
      const sixMonthsAgo = new Date(now);
      sixMonthsAgo.setMonth(now.getMonth() - 6);
      return expenses.filter(e => e.date >= sixMonthsAgo);
    
    case 'this_year':
      return expenses.filter(e => e.date.getFullYear() === now.getFullYear());
    
    case 'last_30_days':
      const thirtyDaysAgo = new Date(now);
      thirtyDaysAgo.setDate(now.getDate() - 30);
      return expenses.filter(e => e.date >= thirtyDaysAgo);
    
    default:
      return expenses;
  }
}

// ===========================================
// BASIC TOOL IMPLEMENTATIONS
// ===========================================

/**
 * TOOL 1: Get spending trend (this month vs last month)
 */
function _getSpendingTrend(allExpenses, args) {
  const period = args.period || 'this_month';
  const currentPeriodExpenses = _filterByPeriod(allExpenses, period);
  const lastPeriodExpenses = _filterByPeriod(allExpenses, 'last_month');
  
  const currentTotal = currentPeriodExpenses.reduce((sum, e) => sum + e.amount, 0);
  const lastPeriodTotal = lastPeriodExpenses.reduce((sum, e) => sum + e.amount, 0);
  
  let changePercent = 0;
  if (lastPeriodTotal > 0) {
    changePercent = ((currentTotal - lastPeriodTotal) / lastPeriodTotal) * 100;
  }
  
  return {
    success: true,
    period: period,
    totalSpent: currentTotal,
    transactionCount: currentPeriodExpenses.length,
    comparedToPeriod: 'last_month',
    lastPeriodTotal: lastPeriodTotal,
    changePercent: changePercent
  };
}

/**
 * TOOL 2: Get top N spending categories
 */
function _getTopCategories(allExpenses, args) {
  const period = args.period || 'this_month';
  const count = args.count || 3;
  const expenses = _filterByPeriod(allExpenses, period);
  const totalSpent = expenses.reduce((sum, e) => sum + e.amount, 0);
  
  const categoryMap = {};
  expenses.forEach(e => {
    const cat = e.category || 'Uncategorized';
    categoryMap[cat] = (categoryMap[cat] || 0) + e.amount;
  });
  
  const sortedCategories = Object.entries(categoryMap)
    .map(([category, amount]) => ({
      category,
      amount,
      percentage: totalSpent > 0 ? (amount / totalSpent) * 100 : 0
    }))
    .sort((a, b) => b.amount - a.amount);
    
  return {
    success: true,
    period: period,
    topCategories: sortedCategories.slice(0, count),
    totalCategories: sortedCategories.length,
    totalSpent: totalSpent
  };
}

/**
 * TOOL 3: Compare current month categories to 3-month average
 */
function _getCategoryVsAverage(allExpenses, args) {
  const now = new Date();
  const currentMonth = now.getMonth();
  const currentYear = now.getFullYear();

  const currentMonthExpenses = _filterByPeriod(allExpenses, 'this_month');
  const currentCategoryTotals = {};
  currentMonthExpenses.forEach(e => {
    const cat = e.category || 'Uncategorized';
    currentCategoryTotals[cat] = (currentCategoryTotals[cat] || 0) + e.amount;
  });

  const last3MonthsCategoryTotals = {};
  for (let i = 1; i <= 3; i++) {
    const targetMonthDate = new Date(currentYear, currentMonth - i, 1);
    const monthKey = targetMonthDate.getMonth();
    const yearKey = targetMonthDate.getFullYear();
    
    const monthExpenses = allExpenses.filter(e => 
      e.date.getMonth() === monthKey && e.date.getFullYear() === yearKey
    );
    
    monthExpenses.forEach(e => {
      const cat = e.category || 'Uncategorized';
      if (!last3MonthsCategoryTotals[cat]) {
        last3MonthsCategoryTotals[cat] = {};
      }
      last3MonthsCategoryTotals[cat][monthKey] = (last3MonthsCategoryTotals[cat][monthKey] || 0) + e.amount;
    });
  }

  const categoriesAboveAverage = [];
  Object.keys(currentCategoryTotals).forEach(cat => {
    const currentTotal = currentCategoryTotals[cat];
    
    if (last3MonthsCategoryTotals[cat]) {
      const monthlyTotals = Object.values(last3MonthsCategoryTotals[cat]);
      const total = monthlyTotals.reduce((sum, val) => sum + val, 0);
      const average = total / 3; 

      if (currentTotal > average && average > 0) {
        const percentHigher = ((currentTotal - average) / average) * 100;
        categoriesAboveAverage.push({
          category: cat,
          currentAmount: currentTotal,
          averageAmount: average,
          percentHigher: percentHigher
        });
      }
    }
  });

  return {
    success: true,
    categoriesAboveAverage: categoriesAboveAverage.sort((a, b) => b.percentHigher - a.percentHigher)
  };
}

/**
 * TOOL 4: Get spending on items labeled "Impulse"
 */
function _getImpulsePurchases(allExpenses, args) {
  const period = args.period || 'this_month';
  const expenses = _filterByPeriod(allExpenses, period);
  
  const impulseExpenses = expenses.filter(e => 
    e.labels && Array.isArray(e.labels) && 
    e.labels.some(label => label.toLowerCase() === 'impulse')
  );
  
  const impulseTotal = impulseExpenses.reduce((sum, e) => sum + e.amount, 0);
  const totalSpent = expenses.reduce((sum, e) => sum + e.amount, 0);
  
  const impulseCategoryMap = {};
  impulseExpenses.forEach(e => {
    const cat = e.category || 'Uncategorized';
    impulseCategoryMap[cat] = (impulseCategoryMap[cat] || 0) + e.amount;
  });
  
  const topImpulseCategories = Object.entries(impulseCategoryMap)
    .map(([category, amount]) => ({ category, amount }))
    .sort((a, b) => b.amount - a.amount)
    .slice(0, 3);
  
  return {
    success: true,
    period: period,
    impulseTotal: impulseTotal,
    impulseTransactionCount: impulseExpenses.length,
    percentageOfTotal: totalSpent > 0 ? (impulseTotal / totalSpent) * 100 : 0,
    topImpulseCategories: topImpulseCategories
  };
}

// ===========================================
// ADVANCED TOOL IMPLEMENTATIONS
// ===========================================

/**
 * TOOL 5: Flexible expense filtering
 */
function _filterExpenses(allExpenses, args) {
  let filtered = allExpenses;
  
  if (args.period) {
    filtered = _filterByPeriod(filtered, args.period, args.startDate, args.endDate);
  }
  
  if (args.categories && args.categories.length > 0) {
    filtered = filtered.filter(e => args.categories.includes(e.category));
  }
  
  if (args.minAmount !== undefined) {
    filtered = filtered.filter(e => e.amount >= args.minAmount);
  }
  if (args.maxAmount !== undefined) {
    filtered = filtered.filter(e => e.amount <= args.maxAmount);
  }
  
  if (args.paymentMethod) {
    filtered = filtered.filter(e => e.paymentMode === args.paymentMethod);
  }
  
  if (args.label) {
    filtered = filtered.filter(e => 
      e.labels && Array.isArray(e.labels) && 
      e.labels.some(l => l.toLowerCase().includes(args.label.toLowerCase()))
    );
  }
  
  const sortBy = args.sortBy || 'date';
  const sortOrder = args.sortOrder || 'desc';
  
  filtered.sort((a, b) => {
    let comparison = 0;
    if (sortBy === 'amount') {
      comparison = a.amount - b.amount;
    } else if (sortBy === 'date') {
      comparison = a.date - b.date;
    }
    return sortOrder === 'desc' ? -comparison : comparison;
  });
  
  const limit = args.limit || 100;
  const results = filtered.slice(0, limit);
  
  return {
    success: true,
    count: results.length,
    totalAmount: results.reduce((sum, e) => sum + e.amount, 0),
    expenses: results.map(e => ({
      date: Utilities.formatDate(e.date, Session.getScriptTimeZone(), 'yyyy-MM-dd'),
      category: e.category,
      subCategory: e.subCategory,
      item: e.item,
      amount: e.amount,
      shopName: e.shopName,
      paymentMode: e.paymentMode,
      labels: e.labels
    }))
  };
}

/**
 * TOOL 6: Compare multiple time periods
 */
function _compareTimePeriods(allExpenses, args) {
  const periods = args.periods || ['this_week', 'last_week'];
  
  const comparisons = periods.map(period => {
    const expenses = _filterByPeriod(allExpenses, period);
    const total = expenses.reduce((sum, e) => sum + e.amount, 0);
    
    const categoryBreakdown = {};
    expenses.forEach(e => {
      const cat = e.category || 'Uncategorized';
      categoryBreakdown[cat] = (categoryBreakdown[cat] || 0) + e.amount;
    });
    
    return {
      period: period,
      totalSpent: total,
      transactionCount: expenses.length,
      averageTransaction: expenses.length > 0 ? total / expenses.length : 0,
      topCategory: Object.entries(categoryBreakdown)
        .sort((a, b) => b[1] - a[1])[0]?.[0] || 'None',
      categoryBreakdown: categoryBreakdown
    };
  });
  
  return {
    success: true,
    comparisons: comparisons
  };
}

/**
 * TOOL 7: Analyze spending patterns
 */
function _analyzeSpendingPatterns(allExpenses, args) {
  const period = args.period || 'last_30_days';
  const expenses = _filterByPeriod(allExpenses, period);
  
  // Day of week analysis
  const dayOfWeekMap = {};
  const dayNames = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
  
  expenses.forEach(e => {
    const day = dayNames[e.date.getDay()];
    if (!dayOfWeekMap[day]) {
      dayOfWeekMap[day] = { count: 0, total: 0 };
    }
    dayOfWeekMap[day].count++;
    dayOfWeekMap[day].total += e.amount;
  });
  
  // Calculate average and standard deviation
  const amounts = expenses.map(e => e.amount);
  const average = amounts.length > 0 ? amounts.reduce((sum, amt) => sum + amt, 0) / amounts.length : 0;
  const stdDev = amounts.length > 0 ? Math.sqrt(
    amounts.reduce((sum, amt) => sum + Math.pow(amt - average, 2), 0) / amounts.length
  ) : 0;
  
  // Find outliers (transactions significantly above average)
  const outliers = expenses.filter(e => e.amount > average + (2 * stdDev))
    .sort((a, b) => b.amount - a.amount)
    .slice(0, 5)
    .map(e => ({
      date: Utilities.formatDate(e.date, Session.getScriptTimeZone(), 'yyyy-MM-dd'),
      category: e.category,
      item: e.item,
      amount: e.amount
    }));
  
  // Find recurring expenses (same merchant appearing multiple times)
  const merchantCount = {};
  expenses.forEach(e => {
    const key = e.shopName || e.item;
    if (key) merchantCount[key] = (merchantCount[key] || 0) + 1;
  });
  
  const recurringExpenses = Object.entries(merchantCount)
    .filter(([_, count]) => count >= 2)
    .sort((a, b) => b[1] - a[1])
    .slice(0, 5)
    .map(([merchant, count]) => ({ merchant, occurrences: count }));
  
  return {
    success: true,
    period: period,
    dayOfWeekSpending: dayOfWeekMap,
    averageTransaction: average,
    standardDeviation: stdDev,
    outlierTransactions: outliers,
    recurringExpenses: recurringExpenses
  };
}

/**
 * TOOL 8: Get comprehensive statistics
 */
function _getExpenseStatistics(allExpenses, args) {
  const period = args.period || 'this_month';
  const expenses = _filterByPeriod(allExpenses, period);
  
  if (expenses.length === 0) {
    return {
      success: true,
      period: period,
      message: 'No expenses found for this period'
    };
  }
  
  const amounts = expenses.map(e => e.amount).sort((a, b) => a - b);
  const total = amounts.reduce((sum, amt) => sum + amt, 0);
  const average = total / amounts.length;
  
  // Calculate median
  const mid = Math.floor(amounts.length / 2);
  const median = amounts.length % 2 === 0 
    ? (amounts[mid - 1] + amounts[mid]) / 2 
    : amounts[mid];
  
  // Payment method breakdown
  const paymentMethods = {};
  expenses.forEach(e => {
    const method = e.paymentMode || 'Unknown';
    paymentMethods[method] = (paymentMethods[method] || 0) + e.amount;
  });
  
  return {
    success: true,
    period: period,
    totalSpent: total,
    transactionCount: expenses.length,
    average: average,
    median: median,
    minimum: amounts[0],
    maximum: amounts[amounts.length - 1],
    paymentMethodBreakdown: paymentMethods,
    uniqueCategories: [...new Set(expenses.map(e => e.category))].length,
    uniqueMerchants: [...new Set(expenses.map(e => e.shopName))].length
  };
}