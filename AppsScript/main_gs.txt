/*******************************************************
 * main.gs
 * - API endpoints (doGet/doPost)
 * - Expense CRUD (add/update/delete)
 * - Routes chatbot requests to chatbot.gs
 *******************************************************/

const SHEETS = {
  EXPENSES: 'Form Responses 1',
  METRICS: 'Metrics',
  NOTIFICATIONS: 'Notification_History',
  SETTINGS: 'User_Settings'
};

const MAX_NOTIFICATIONS = 100;

// ==========================================================
// 1. GET REQUEST HANDLER (doGet)
// ==========================================================
function doGet(e) {
  try {
    const mode = (e.parameter.mode || 'raw').toLowerCase();

    if (mode === 'notifications') return jsonResponse(getNotifications(false));
    if (mode === 'unread') return jsonResponse(getNotifications(true));
    if (mode === 'metrics') return jsonResponse(getCurrentMetrics()); 
    if (mode === 'settings') return jsonResponse(getUserSettings());

    if (mode === 'insights') {
      const sinceParam = e.parameter.since;
      const sinceDate = sinceParam ? new Date(sinceParam) : null;
      const insights = getUndeliveredInsights(sinceDate);
      return jsonResponse(insights);
    }

    // Default: return all expenses
    return jsonResponse(getExpenses());
  } catch (err) {
    Logger.log('doGet Error: ' + err.message);
    return jsonResponse({ success: false, message: err.message || String(err) });
  }
}

// ==========================================================
// 2. POST REQUEST HANDLER (doPost)
// ==========================================================
function doPost(e) {
  try {
    const data = JSON.parse(e.postData.contents || '{}');

    // ✅ CHATBOT: Route to chatbot.gs
    if (data.functionCall) {
      // NOTE: handleToolCall is defined in chatbot.gs
      const result = handleToolCall(data.functionCall); 
      return jsonResponse(result);
    }

    const action = data.action || 'add';

    // ✅ EXPENSE CRUD
    if (['add', 'update', 'delete'].includes(action)) {
      const result = handleExpenseAction(action, data);

      if (result.success) {
        Utilities.sleep(1000); 
        calculateInstantMetrics(); 
      }

      return jsonResponse(result);
    }

    // ✅ SETTINGS & ADMIN ACTIONS
    if (action === 'updateSettings') return jsonResponse(updateUserSettings(data.settings || {}));
    if (action === 'calculateMetrics') return jsonResponse(calculateAllMetrics());
    if (action === 'getNotifications') return jsonResponse(getNotifications(data.unreadOnly));
    if (action === 'markNotificationRead') return jsonResponse(markNotificationRead(data.id));
    if (action === 'markNotificationDismissed') return jsonResponse(markNotificationDismissed(data.id));
    
    if (action === 'markInsightDelivered') {
      return jsonResponse(markInsightDelivered(data.id)); 
    }
    
    return jsonResponse({ success: false, message: `Unknown action: ${action}` });

  } catch (error) {
    Logger.log('doPost Error: ' + error.message);
    return jsonResponse({ success: false, message: error.message });
  }
}

// ==========================================================
// 3. HELPER FUNCTIONS
// ==========================================================

/**
 * getExpenses - Fetches and structures all expense data from the sheet.
 */
function getExpenses() {
  const sheet = getSheet(SHEETS.EXPENSES);
  if (!sheet) return [];

  const range = sheet.getDataRange();
  const values = range.getValues();
  if (values.length <= 1) return [];

  const headers = values[0].map(h => String(h).trim());
  const rows = values.slice(1);
  const expenses = [];

  const getColumnIndex = (columnName) => {
    const variations = {
      'item': ['Item', 'item', 'ITEM'],
      'amount': ['Amount', 'amount', 'AMOUNT'],
      'category': ['Category', 'category', 'CATEGORY'],
      'subCategory': ['Sub Category', 'SubCategory', 'subcategory', 'sub_category'],
      'email': ['Email Address', 'Email', 'email'],
      'shopName': ['Shop/Site/Person name', 'Shop', 'shop', 'shopName'],
      'paymentMode': ['Mode of payment', 'Payment Mode', 'paymentMode'],
      'labels': ['Labels', 'labels', 'LABELS'],
      'id': ['ID', 'Id', 'id'],
      'date': ['Date', 'date', 'DATE'],
      'timestamp': ['Timestamp', 'timestamp', 'TIMESTAMP']
    };
    
    for (const variant of variations[columnName] || []) {
      const idx = headers.indexOf(variant);
      if (idx !== -1) return idx;
    }
    return -1;
  };

  rows.forEach((row, index) => {
    try {
      const expense = {
        id: row[getColumnIndex('id')] || `sheet-${index + 1}`,
        timestamp: row[getColumnIndex('timestamp')] ? new Date(row[getColumnIndex('timestamp')]).toISOString() : '',
        date: normalizeDate(row[getColumnIndex('date')]),
        category: row[getColumnIndex('category')] || '',
        subCategory: row[getColumnIndex('subCategory')] || '',
        item: row[getColumnIndex('item')] || '',
        amount: parseFloat(row[getColumnIndex('amount')]) || 0,
        email: row[getColumnIndex('email')] || '',
        shopName: row[getColumnIndex('shopName')] || '',
        paymentMode: row[getColumnIndex('paymentMode')] || '',
        labels: parseLabels(row[getColumnIndex('labels')]),
      };
      expenses.push(expense);
    } catch (err) {
      Logger.log(`Skipping row ${index + 2}: ${err}`);
    }
  });

  return expenses;
}

/**
 * normalizeDate - Converts date cells into yyyy-MM-dd string format.
 */
function normalizeDate(value) {
  if (!value) return '';
  try {
    if (Object.prototype.toString.call(value) === '[object Date]') {
      return Utilities.formatDate(value, Session.getScriptTimeZone(), 'yyyy-MM-dd');
    }
    if (typeof value === 'string' && /^\d{4}-\d{2}-\d{2}$/.test(value)) {
      return value;
    }
    const parsed = new Date(value);
    if (!isNaN(parsed)) {
      return Utilities.formatDate(parsed, Session.getScriptTimeZone(), 'yyyy-MM-dd');
    }
  } catch (err) {
    Logger.log('normalizeDate error: ' + err);
  }
  return '';
}

/**
 * parseLabels - Converts a comma-separated string into a clean array.
 */
function parseLabels(value) {
  if (!value) return [];
  if (Array.isArray(value)) return value;
  return String(value)
    .split(',')
    .map(l => l.trim())
    .filter(l => l.length > 0);
}

/**
 * jsonResponse - Utility to format responses.
 */
function jsonResponse(obj) {
  return ContentService.createTextOutput(JSON.stringify(obj))
    .setMimeType(ContentService.MimeType.JSON);
}

/**
 * getSheet - Utility to get a sheet by name.
 */
function getSheet(sheetName) {
  return SpreadsheetApp.getActiveSpreadsheet().getSheetByName(sheetName);
}